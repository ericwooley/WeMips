var examples = {
	additionDoublerExample: function () {
		return [
			"ADDI $s0, $zero, 2 # set s0 to 2",
			"ADD $s1, $s0, $s0 # double s0 by adding it to itself, should be 4",
			"ADD $s2, $s1, $s1 # double s1 by adding it to itself, should be 8",
			"ADD $s3, $s2, $s2 # double s2 by adding it to itself, should be 16",
			"ADD $s4, $s3, $s3 # double s3 by adding it to itself, should be 32",
			"ADD $s5, $s4, $s4 # double s4 by adding it to itself, should be 64",
			"ADD $s6, $s5, $s5 # double s5 by adding it to itself, should be 128",
			"ADD $s7, $s6, $s6 # double s6 by adding it to itself, should be 256",
			"",
			"ADD $t0, $s7, $s7 # double s7 by adding it to itself, should be 512",
			"ADD $t1, $t0, $t0 # double t0 by adding it to itself, should be 1024",
			"ADD $t2, $t1, $t1 # double t1 by adding it to itself, should be 2048",
			"ADD $t3, $t2, $t2 # double t2 by adding it to itself, should be 4096",
			"ADD $t4, $t3, $t3 # double t3 by adding it to itself, should be 8192",
			"ADD $t5, $t4, $t4 # double t4 by adding it to itself, should be 16384",
			"ADD $t6, $t5, $t5 # double t5 by adding it to itself, should be 32768",
			"ADD $t7, $t6, $t6 # double t6 by adding it to itself, should be 65536",
			"ADD $t8, $t7, $t7 # double t7 by adding it to itself, should be 131072",
			"ADD $t9, $t8, $t8 # double t8 by adding it to itself, should be 262144",
			"",
			"ADD $a0, $t9, $t9 # double t9 by adding it to itself, should be 524288",
			"ADD $a1, $a0, $a0 # double a0 by adding it to itself, should be 1048576",
			"ADD $a2, $a1, $a1 # double a1 by adding it to itself, should be 2097152",
			"ADD $a3, $a2, $a2 # double a2 by adding it to itself, should be 4194304",
			"",
			"ADD $v0, $a3, $a3 # double a3 by adding it to itself, should be 8388608",
			"ADD $v1, $v0, $v0 # double v0 by adding it to itself, should be 16777216"
		];
	},

	stavExample: function() {
		return [
			"# Set the all of the registers to the same value",
			"# then manipulate all of them",
			"",
			"# change the s registers",
			"ADD $s0, $zero, $zero",
			"ADDI $s1, $zero, 1",
			"ADDI $s2, $zero, 2",
			"ADDI $s3, $zero, 3",
			"ADDI $s4, $zero, 4",
			"ADDI $s5, $zero, 5",
			"ADDI $s6, $zero, 6",
			"ADDI $s7, $zero, 7",
			"ADDI $s8, $zero, 8 # This should generate an error",
			"ADDI $s9, $zero, 9 # This should generate an error",
			"",
			"",
			"# change the t registers",
			"ADD $t0, $zero, $zero",
			"ADDI $t1, $zero, 10",
			"ADDI $t2, $zero, 20",
			"ADDI $t3, $zero, 30",
			"ADDI $t4, $zero, 40",
			"ADDI $t5, $zero, 50",
			"ADDI $t6, $zero, 60",
			"ADDI $t7, $zero, 70",
			"ADDI $t8, $zero, 80",
			"ADDI $t9, $zero, 90",
			"",
			"# change the a registers",
			"ADD $a0, $zero, $zero",
			"ADDI $a1, $zero, 100",
			"ADDI $a2, $zero, 200",
			"ADDI $a3, $zero, 300",
			"",
			"# change the v registers",
			"ADD $v0, $zero, $zero",
			"ADDI $v1, $zero, 1000"
		];
	},

	looperExample: function() {
		return [
			"# This is the same as the doubler, except the jumps cause the order",
			"# to change drastically, therefore all of the values will be different.",
			"CHANGE_S: ADDI $t0, $zero, 2",
			"BEQ $s0, $t0, EXIT",
			"ADD $s1, $s0, $s0 # double s0 by adding it to itself, should be 4",
			"ADD $s2, $s1, $s1 # double s1 by adding it to itself, should be 8",
			"ADD $s3, $s2, $s2 # double s2 by adding it to itself, should be 16",
			"ADD $s4, $s3, $s3 # double s3 by adding it to itself, should be 32",
			"ADD $s5, $s4, $s4 # double s4 by adding it to itself, should be 64",
			"ADD $s6, $s5, $s5 # double s5 by adding it to itself, should be 128",
			"ADD $s7, $s6, $s6 # double s6 by adding it to itself, should be 256",
			"J CHANGE_V",
			"",
			"CHANGE_T: ADD $t0, $s7, $s7",
			"ADD $t1, $t0, $t0",
			"ADD $t2, $t1, $t1",
			"ADD $t3, $t2, $t2",
			"ADD $t4, $t3, $t3",
			"ADD $t5, $t4, $t4",
			"ADD $t6, $t5, $t5",
			"ADD $t7, $t6, $t6",
			"ADD $t8, $t7, $t7",
			"ADD $t9, $t8, $t8",
			"J CHANGE_S",
			"",
			"CHANGE_A: ADD $a0, $t9, $t9",
			"ADD $a1, $a0, $a0",
			"ADD $a2, $a1, $a1",
			"ADD $a3, $a2, $a2",
			"J CHANGE_S",
			"",
			"CHANGE_V: ADD $v0, $a3, $a3",
			"ADD $v1, $v0, $v0",
			"J CHANGE_A",
			""
		];
	},
	stackTest: function(){
		return [
			"ADDI $s0, $zero, 10",
			"ADDI $s1, $zero, 9",
			"SB $s0, -10($sp)",
			"SB $s1, -9($sp)",
			"LB $s2, -9($sp)",
			"ADDI $sp, $sp, -1",
			"ADDI $sp, $sp, -2",
			"ADDI $sp, $sp, -3",
			"ADDI $sp, $sp, -5",
			"ADDI $sp, $sp, -9",
			"ADDI $sp, $sp, -14",
			"ADDI $sp, $sp, -23",
			"ADDI $sp, $sp, -37",
			"SB $s0, 0($sp)",
			"LB $s3, 0($sp)"
		];
	},
	helloWorld: function() {
		// prints "Hello world!" to the console.
		return [
			"# Store 'Hello world!\0' at the top of the stack",
			"ADDI $sp, $sp, -13",
			"ADDI $t0, $zero, 72 # H",
			"SB $t0, 0($sp)",
			"ADDI $t0, $zero, 101 # e",
			"SB $t0, 1($sp)",
			"ADDI $t0, $zero, 108 # l",
			"SB $t0, 2($sp)",
			"ADDI $t0, $zero, 108 # l",
			"SB $t0, 3($sp)",
			"ADDI $t0, $zero, 111 # o",
			"SB $t0, 4($sp)",
			"ADDI $t0, $zero, 32 # (space)",
			"SB $t0, 5($sp)",
			"ADDI $t0, $zero, 119 # w",
			"SB $t0, 6($sp)",
			"ADDI $t0, $zero, 111 # o",
			"SB $t0, 7($sp)",
			"ADDI $t0, $zero, 114 # r",
			"SB $t0, 8($sp)",
			"ADDI $t0, $zero, 108 # l",
			"SB $t0, 9($sp)",
			"ADDI $t0, $zero, 100 # d",
			"SB $t0, 10($sp)",
			"ADDI $t0, $zero, 33 # !",
			"SB $t0, 11($sp)",
			"ADDI $t0, $zero, 0 # (null)",
			"SB $t0, 12($sp)",
			"",
			"ADDI $v0, $zero, 4 # 4 is for print string",
			"ADDI $a0, $sp, 0",
			"syscall 			# print to the log"
		];
	},
	codeGenSaveString: function() {
		// Given the input "Hello world!", this will output the hello world example above
		return [
			"# This example will allow you to easily store a string on to the stack.",
			"# Once you run this, copy its output and use it in an MIPS scripts you want.",
			"",
			"# Store the user's input to the stack",
			"ADDI $t0, $zero, 65   # max chars to read",
			"SUBU $sp, $sp, $t0",
			"ADDI $t1, $sp, 0 # t1 will store the location of the user's input",
			"ADDI $a0, $sp, 0",
			"ADD $a1, $zero, $t0 # length of read",
			"ADDI $v0, $zero, 8 # read string",
			"syscall",
			"",
			"ADDI $v0, $zero, 60 # Code generator",
			"syscall"
		];
	},
	interactiveExample: function() {
		return [
			"# NOTE: You will have to hit cancel when Chrome complains that you are stuck in an infinite loop.", // TODO: is there a way to prevent this?
			"# Registers in use:",
			"#   $t0: location of 'What year were you born?' on stack",
			"#   $t1: location of 'Your age is:' on stack",
			"#   $t2: location of 'Would you like to try again?' on stack",
			"#   $t4: the current year (2013)",
			"",
			"addi $t4, $zero, 2013",
			"",
			"# Store 'What year were you born?' at the top of the stack",
			"addiu $sp, $sp, -25",
			"addi $t9, $zero, 87 # 'W'",
			"sb $t9, 0($sp)",
			"addi $t9, $zero, 104 # 'h'",
			"sb $t9, 1($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 2($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 3($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 4($sp)",
			"addi $t9, $zero, 121 # 'y'",
			"sb $t9, 5($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 6($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 7($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 8($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 9($sp)",
			"addi $t9, $zero, 119 # 'w'",
			"sb $t9, 10($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 11($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 12($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 13($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 14($sp)",
			"addi $t9, $zero, 121 # 'y'",
			"sb $t9, 15($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 16($sp)",
			"addi $t9, $zero, 117 # 'u'",
			"sb $t9, 17($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 18($sp)",
			"addi $t9, $zero, 98 # 'b'",
			"sb $t9, 19($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 20($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 21($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 22($sp)",
			"addi $t9, $zero, 63 # '?'",
			"sb $t9, 23($sp)",
			"sb $zero, 24($sp) # '\0'",
			"",
			"addiu $t0, $sp, 0",
			"",
			"# Store 'Your age is: ' at the top of the stack",
			"addiu $sp, $sp, -14",
			"addi $t9, $zero, 89 # 'Y'",
			"sb $t9, 0($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 1($sp)",
			"addi $t9, $zero, 117 # 'u'",
			"sb $t9, 2($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 3($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 4($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 5($sp)",
			"addi $t9, $zero, 103 # 'g'",
			"sb $t9, 6($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 7($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 8($sp)",
			"addi $t9, $zero, 105 # 'i'",
			"sb $t9, 9($sp)",
			"addi $t9, $zero, 115 # 's'",
			"sb $t9, 10($sp)",
			"addi $t9, $zero, 58 # ':'",
			"sb $t9, 11($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 12($sp)",
			"sb $zero, 13($sp) # '\0'",
			"",
			"addiu $t1, $sp, 0",
			"",
			"# Store 'Would you like to try again?' at the top of the stack",
			"addiu $sp, $sp, -29",
			"addi $t9, $zero, 87 # 'W'",
			"sb $t9, 0($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 1($sp)",
			"addi $t9, $zero, 117 # 'u'",
			"sb $t9, 2($sp)",
			"addi $t9, $zero, 108 # 'l'",
			"sb $t9, 3($sp)",
			"addi $t9, $zero, 100 # 'd'",
			"sb $t9, 4($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 5($sp)",
			"addi $t9, $zero, 121 # 'y'",
			"sb $t9, 6($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 7($sp)",
			"addi $t9, $zero, 117 # 'u'",
			"sb $t9, 8($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 9($sp)",
			"addi $t9, $zero, 108 # 'l'",
			"sb $t9, 10($sp)",
			"addi $t9, $zero, 105 # 'i'",
			"sb $t9, 11($sp)",
			"addi $t9, $zero, 107 # 'k'",
			"sb $t9, 12($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 13($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 14($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 15($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 16($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 17($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 18($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 19($sp)",
			"addi $t9, $zero, 121 # 'y'",
			"sb $t9, 20($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 21($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 22($sp)",
			"addi $t9, $zero, 103 # 'g'",
			"sb $t9, 23($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 24($sp)",
			"addi $t9, $zero, 105 # 'i'",
			"sb $t9, 25($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 26($sp)",
			"addi $t9, $zero, 63 # '?'",
			"sb $t9, 27($sp)",
			"sb $zero, 28($sp) # '\0'",
			"",
			"addiu $t2, $sp, 0",
			"",
			"ASK_QUESTION:",
			"",
			"addi $a0, $t0, 0",
			"addi $v0, $zero, 51",
			"syscall",
			"",
			"beq $a1, $zero, VALID_VALUE",
			"",
			"INVALID_VALUE:",
			"",
			"# Store 'Invalid value entered.' at the top of the stack",
			"addiu $sp, $sp, -23",
			"addi $t9, $zero, 73 # 'I'",
			"sb $t9, 0($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 1($sp)",
			"addi $t9, $zero, 118 # 'v'",
			"sb $t9, 2($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 3($sp)",
			"addi $t9, $zero, 108 # 'l'",
			"sb $t9, 4($sp)",
			"addi $t9, $zero, 105 # 'i'",
			"sb $t9, 5($sp)",
			"addi $t9, $zero, 100 # 'd'",
			"sb $t9, 6($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 7($sp)",
			"addi $t9, $zero, 118 # 'v'",
			"sb $t9, 8($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 9($sp)",
			"addi $t9, $zero, 108 # 'l'",
			"sb $t9, 10($sp)",
			"addi $t9, $zero, 117 # 'u'",
			"sb $t9, 11($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 12($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 13($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 14($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 15($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 16($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 17($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 18($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 19($sp)",
			"addi $t9, $zero, 100 # 'd'",
			"sb $t9, 20($sp)",
			"addi $t9, $zero, 46 # '.'",
			"sb $t9, 21($sp)",
			"sb $zero, 22($sp) # '\0'",
			"",
			"addi $a0, $sp, 0",
			"addi $v0, $zero, 4 # print string",
			"syscall",
			"",
			"  j END",
			"",
			"",
			"VALID_VALUE:",
			"",
			"# show an alert with their age",
			"",
			"subu $t3, $t4, $a0 # user's integer input",
			"",
			"addi $a0, $t1, 0 # 'your age is: '",
			"addi $a1, $t3, 0 # their age",
			"addi $v0, $zero, 56",
			"syscall",
			"",
			"",
			"addi $a0, $t2, 0 # 'try again?'",
			"addi $v0, $zero, 50",
			"syscall",
			"",
			"beq $a0, $zero, ASK_QUESTION",
			"",
			"END:"
		];
	},
	binary2Decimal: function() {
		return [
			"# Binary to Decimal converter",
			"",
			"# Store 'Enter a binary string:' at the top of the stack",
			"addiu $sp, $sp, -23",
			"addi $t9, $zero, 69 # 'E'",
			"sb $t9, 0($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 1($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 2($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 3($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 4($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 5($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 6($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 7($sp)",
			"addi $t9, $zero, 98 # 'b'",
			"sb $t9, 8($sp)",
			"addi $t9, $zero, 105 # 'i'",
			"sb $t9, 9($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 10($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 11($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 12($sp)",
			"addi $t9, $zero, 121 # 'y'",
			"sb $t9, 13($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 14($sp)",
			"addi $t9, $zero, 115 # 's'",
			"sb $t9, 15($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 16($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 17($sp)",
			"addi $t9, $zero, 105 # 'i'",
			"sb $t9, 18($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 19($sp)",
			"addi $t9, $zero, 103 # 'g'",
			"sb $t9, 20($sp)",
			"addi $t9, $zero, 58 # ':'",
			"sb $t9, 21($sp)",
			"sb $zero, 22($sp) # '\0'",
			"",
			"addi $t0, $sp, 0   # location of question",
			"",
			"addi $t2, $zero, 129 # max chars to allow",
			"subu $sp, $sp, $t2",
			"addi $t3, $sp, 0   # location of answer",
			"addi $a0, $t0, 0 # message",
			"addi $a1, $sp, 0 # address to save string",
			"addi $a2, $t2, 0 # max chars",
			"addi $v0, $zero, 54",
			"syscall",
			"",
			"bne $a1, $zero, END",
			"",
			"addi $a0, $t3, 0",
			"addi $v0, $zero, 61",
			"syscall",
			"",
			"END:"
		];
	},
	decimal2Binary: function() {
		return [
			"# Decimal to Binary converter",
			"",
			"# CUSTOMIZATION OPTION: you can change this number to",
			"#   output a different amount of characters.",
			"addi $t2, $zero, 32",
			"# CUSTOMIZATION OPTION: the size for each block",
			"addi $t3, $zero, 4",
			"",
			"",
			"# Store 'Enter a number to convert to binary:' at the top of the stack",
			"addiu $sp, $sp, -37",
			"addi $t9, $zero, 69 # 'E'",
			"sb $t9, 0($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 1($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 2($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 3($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 4($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 5($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 6($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 7($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 8($sp)",
			"addi $t9, $zero, 117 # 'u'",
			"sb $t9, 9($sp)",
			"addi $t9, $zero, 109 # 'm'",
			"sb $t9, 10($sp)",
			"addi $t9, $zero, 98 # 'b'",
			"sb $t9, 11($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 12($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 13($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 14($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 15($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 16($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 17($sp)",
			"addi $t9, $zero, 99 # 'c'",
			"sb $t9, 18($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 19($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 20($sp)",
			"addi $t9, $zero, 118 # 'v'",
			"sb $t9, 21($sp)",
			"addi $t9, $zero, 101 # 'e'",
			"sb $t9, 22($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 23($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 24($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 25($sp)",
			"addi $t9, $zero, 116 # 't'",
			"sb $t9, 26($sp)",
			"addi $t9, $zero, 111 # 'o'",
			"sb $t9, 27($sp)",
			"addi $t9, $zero, 32 # ' '",
			"sb $t9, 28($sp)",
			"addi $t9, $zero, 98 # 'b'",
			"sb $t9, 29($sp)",
			"addi $t9, $zero, 105 # 'i'",
			"sb $t9, 30($sp)",
			"addi $t9, $zero, 110 # 'n'",
			"sb $t9, 31($sp)",
			"addi $t9, $zero, 97 # 'a'",
			"sb $t9, 32($sp)",
			"addi $t9, $zero, 114 # 'r'",
			"sb $t9, 33($sp)",
			"addi $t9, $zero, 121 # 'y'",
			"sb $t9, 34($sp)",
			"addi $t9, $zero, 58 # ':'",
			"sb $t9, 35($sp)",
			"sb $zero, 36($sp) # '\0'",
			"",
			"addi $t0, $sp, 0   # location of question",
			"",
			"addi $a0, $t0, 0 # message",
			"addi $v0, $zero, 51",
			"syscall",
			"",
			"bne $a1, $zero, END",
			"",
			"addi $a0, $a0, 0 # user's answer",
			"addi $a1, $t2, 0 # number of chars",
			"addi $a2, $t3, 0 # block size",
			"addi $v0, $zero, 62",
			"syscall",
			"",
			"END:"
		];
	},
	debug: function() {
		return [
			'ADDI $t0, $zero, 10   # max chars to read',
			'SUBU $sp, $sp, $t0',
			'ADDI $a0, $sp, 0',
			'ADD $a1, $zero, $t0',
			'ADDI $v0, $zero, 8 # read string',
			'syscall'
		];
	}
}
