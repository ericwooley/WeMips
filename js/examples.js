var examples = {
	additionDoublerExample: function () {
		return [
			"ADDI $s0, $zero, 2 # set s0 to 2",
			"ADD $s1, $s0, $s0 # double s0 by adding it to itself, should be 4",
			"ADD $s2, $s1, $s1 # double s1 by adding it to itself, should be 8",
			"ADD $s3, $s2, $s2 # double s2 by adding it to itself, should be 16",
			"ADD $s4, $s3, $s3 # double s3 by adding it to itself, should be 32",
			"ADD $s5, $s4, $s4 # double s4 by adding it to itself, should be 64",
			"ADD $s6, $s5, $s5 # double s5 by adding it to itself, should be 128",
			"ADD $s7, $s6, $s6 # double s6 by adding it to itself, should be 256",
			"",
			"ADD $t0, $s7, $s7 # double s7 by adding it to itself, should be 512",
			"ADD $t1, $t0, $t0 # double t0 by adding it to itself, should be 1024",
			"ADD $t2, $t1, $t1 # double t1 by adding it to itself, should be 2048",
			"ADD $t3, $t2, $t2 # double t2 by adding it to itself, should be 4096",
			"ADD $t4, $t3, $t3 # double t3 by adding it to itself, should be 8192",
			"ADD $t5, $t4, $t4 # double t4 by adding it to itself, should be 16384",
			"ADD $t6, $t5, $t5 # double t5 by adding it to itself, should be 32768",
			"ADD $t7, $t6, $t6 # double t6 by adding it to itself, should be 65536",
			"ADD $t8, $t7, $t7 # double t7 by adding it to itself, should be 131072",
			"ADD $t9, $t8, $t8 # double t8 by adding it to itself, should be 262144",
			"",
			"ADD $a0, $t9, $t9 # double t9 by adding it to itself, should be 524288",
			"ADD $a1, $a0, $a0 # double a0 by adding it to itself, should be 1048576",
			"ADD $a2, $a1, $a1 # double a1 by adding it to itself, should be 2097152",
			"ADD $a3, $a2, $a2 # double a2 by adding it to itself, should be 4194304",
			"",
			"ADD $v0, $a3, $a3 # double a3 by adding it to itself, should be 8388608",
			"ADD $v1, $v0, $v0 # double v0 by adding it to itself, should be 16777216"
		];
	},

	stavExample: function() {
		return [
			"# Set the all of the registers to the same value",
			"# then manipulate all of them",
			"",
			"# change the s registers",
			"ADD $s0, $zero, $zero",
			"ADDI $s1, $zero, 1",
			"ADDI $s2, $zero, 2",
			"ADDI $s3, $zero, 3",
			"ADDI $s4, $zero, 4",
			"ADDI $s5, $zero, 5",
			"ADDI $s6, $zero, 6",
			"ADDI $s7, $zero, 7",
			"ADDI $s8, $zero, 8 # This should generate an error",
			"ADDI $s9, $zero, 9 # This should generate an error",
			"",
			"",
			"# change the t registers",
			"ADD $t0, $zero, $zero",
			"ADDI $t1, $zero, 10",
			"ADDI $t2, $zero, 20",
			"ADDI $t3, $zero, 30",
			"ADDI $t4, $zero, 40",
			"ADDI $t5, $zero, 50",
			"ADDI $t6, $zero, 60",
			"ADDI $t7, $zero, 70",
			"ADDI $t8, $zero, 80",
			"ADDI $t9, $zero, 90",
			"",
			"# change the a registers",
			"ADD $a0, $zero, $zero",
			"ADDI $a1, $zero, 100",
			"ADDI $a2, $zero, 200",
			"ADDI $a3, $zero, 300",
			"",
			"# change the v registers",
			"ADD $v0, $zero, $zero",
			"ADDI $v1, $zero, 1000"
		];
	},

	looperExample: function() {
		return [
			"# This is the same as the doubler, except the jumps cause the order",
			"# to change drastically, therefore all of the values will be different.",
			"CHANGE_S: ADDI $s0, $zero, 2 # set s0 to 2",
			"ADD $s1, $s0, $s0 # double s0 by adding it to itself, should be 4",
			"ADD $s2, $s1, $s1 # double s1 by adding it to itself, should be 8",
			"ADD $s3, $s2, $s2 # double s2 by adding it to itself, should be 16",
			"ADD $s4, $s3, $s3 # double s3 by adding it to itself, should be 32",
			"ADD $s5, $s4, $s4 # double s4 by adding it to itself, should be 64",
			"ADD $s6, $s5, $s5 # double s5 by adding it to itself, should be 128",
			"ADD $s7, $s6, $s6 # double s6 by adding it to itself, should be 256",
			"J CHANGE_V",
			"",
			"CHANGE_T: ADD $t0, $s7, $s7",
			"ADD $t1, $t0, $t0",
			"ADD $t2, $t1, $t1",
			"ADD $t3, $t2, $t2",
			"ADD $t4, $t3, $t3",
			"ADD $t5, $t4, $t4",
			"ADD $t6, $t5, $t5",
			"ADD $t7, $t6, $t6",
			"ADD $t8, $t7, $t7",
			"ADD $t9, $t8, $t8",
			"J CHANGE_S",
			"",
			"CHANGE_A: ADD $a0, $t9, $t9",
			"ADD $a1, $a0, $a0",
			"ADD $a2, $a1, $a1",
			"ADD $a3, $a2, $a2",
			"J CHANGE_S",
			"",
			"CHANGE_V: ADD $v0, $a3, $a3",
			"ADD $v1, $v0, $v0",
			"J CHANGE_A",
			""
		];
	},
	stackTest: function(){
		return [
			"ADDI $s0, $zero, 10",
			"ADDI $s1, $zero, 9",
			"SB $s0, -10($sp)",
			"SB $s1, -9($sp)",
			"LB $s2, -9($sp)",
			"ADDI $sp, $sp, -1",
			"ADDI $sp, $sp, -2",
			"ADDI $sp, $sp, -3",
			"ADDI $sp, $sp, -5",
			"ADDI $sp, $sp, -9",
			"ADDI $sp, $sp, -14",
			"ADDI $sp, $sp, -23",
			"ADDI $sp, $sp, -37",
			"SB $s0, 0($sp)",
			"LB $s3, 0($sp)"
		];
	}
}